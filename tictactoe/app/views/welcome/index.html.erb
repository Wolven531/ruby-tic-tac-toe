<% content_for :title, "Home" %>

<style>
	.board {
		/*
			background-color: #222;
			border: 1px solid #111;
		*/
		border-radius: 1em;
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		grid-template-rows: repeat(3, 1fr);
		/* Account for borders - 1px border x 2 sides x 3 rows */
		height: calc(3 * 6em + 6px);
	}

	.cell {
		background-color: #999;
		border: 1px solid #333;
		border-radius: 1em;
		height: 6em;
	}

	.cell.selected.p0 {
		background-color: #afa;
	}

	.cell.selected.p1 {
		background-color: #aaf;
	}

	.board.started .cell:hover:not(.selected) {
		background-color: rgba(255, 255, 128, .5);
		cursor: pointer;
	}

	.container {

	}

	.controls {

	}

	.container h1,
	.scoreboard h3,
	.controls h3 {
		margin: 1em auto;
		width: 5em;
	}

	.row {
		
	}

	.scoreboard {
		background-color: #acc;
		border: 1px solid #333;
		border-radius: 1em;
		margin-top: 3em;
		min-height: 15em;
	}
</style>

<section class="container">
	<h1>Tic Tac Toe</h1>

	<article id="board" class="board not-started">
	<% (1..3).each do | rowNum | %>
		<div class="row row<%= rowNum %>">
		<% (1..3).each do | colNum | %>
			<% cellNum = 3 * (rowNum - 1) + colNum %>
			<div id="c<%= cellNum %>" class="cell cell<%= cellNum %>" onclick="handleCellClick(this)">
			</div>
		<% end %>
		</div>
	<% end %>
	</article>
	<article id="controls" class="controls">
		<h3>Controls</h3>
		<div>
			<p class="status">Status - N/A</p>
			<p class="turns"></p>
			<button onclick="startNewGame()">New Game</button>
		</div>
	</article>
	<article id="scoreboard" class="scoreboard">
		<h3>Scoreboard</h3>
	</article>
</section>

<script>
	// wait for window to complete load; arrow func requires JS >= es2015 in browser
	// window.onload = () => { }

	class Game {
		constructor() {
			console.info('[ Game | ctor ] constructing new Game instance')
			this.currentPlayer = -1
			this.totalTurns = -1
		}

		/**
		* This method advances the game turn to the next player
		*/
		advanceTurn() {
			console.info(`[ Game | advanceTurn ] totalTurns=${this.totalTurns} currentPlayer=${this.currentPlayer}`)

			this.totalTurns++

			// advance to next turn, ensure value is either 0 or 1
			this.currentPlayer = (this.currentPlayer + 1) % 2

			console.info(`[ Game | advanceTurn ] it is now p${this.currentPlayer}\'s turn`)

			updateStatus()
		}

		/**
		* This method begins the game and advances to the first turn; it can only meaningfully be called once -
		* after the first invocation, this method will bail early with a console warning
		*/
		startGame() {
			if (this.currentPlayer !== -1) {
				console.warn('[ Game | startGame ] cannot start a game already in progress! bailing...')
				return
			}

			console.info('[ Game | startGame ] starting game')

			this.advanceTurn()
		}
	}

	let currentGame

	/**
	* This function returns a friendly display value for game status
	*/
	function formatStatus(player) {
		console.info('[ formatStatus ]')

		switch (player) {
			case 0:
			case 1:
				return `It is P${player}'s turn`
			case -1:
			default:
				return 'N/A'
		}
	}

	/**
	* This function creates a new game and starts it
	*/
	function startNewGame() {
		console.info('[ startNewGame ]')

		currentGame = new Game()
		currentGame.startGame()
	}

	/**
	* This function is invoked when a cell is clicked; it contains move validation logic
	*/
	function handleCellClick(cell) {
		console.info('[ handleCellClick ]')

		const player = currentGame.currentPlayer

		if (player === -1 || cell.classList.contains('selected')) {
			return
		}

		cell.removeEventListener('click', handleCellClick)
		cell.classList.add('selected', `p${player}`)

		currentGame.advanceTurn()
	}

	/**
	* This function updates the DOM to reflect a new game status (CSS classes on the board, event handlers, etc.)
	*/
	function updateStatus() {
		console.info('[ updateStatus ]')

		const ctrl = document.getElementById('controls')
		const status = ctrl.getElementsByClassName('status')[0]
		const totalTurnsLabel = ctrl.getElementsByClassName('turns')[0]
		const player = currentGame.currentPlayer

		console.info(`[ updateStatus ] turns=${currentGame.totalTurns} player=${player}`)

		status.textContent = `Status - ${formatStatus(player)}`
		totalTurnsLabel.textContent = `Turns taken - ${currentGame.totalTurns}`

		const board = document.getElementById('board')
		board.classList.replace('not-started', 'started')
	}
</script>
